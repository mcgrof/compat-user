#!/bin/bash
#set -e

# Set this empty and it will use kernel.org,
# as that is the origin
SOURCE="github"

DATE=$(date -I)
COMPAT="compat-wireless"
COMPAT_DIR="${COMPAT}"

COMPAT_DATE_DIR="${COMPAT}-${DATE}"
ORIG_COMPAT_DATE_DIR="${COMPAT_DATE_DIR}"
OUTPUT="/export/kernel/$COMPAT_DIR/"

COMPAT_WIRELESS_TREE="$HOME/compat-wireless-2.6"
LINUX_NEXT="$HOME/linux-next/"

STAGING="/var/opt/compat/staging/"

FILE_POSTFIX=""
FLAGS=""

export GIT_COMPAT_TREE="$HOME/compat/"
export GIT_TREE="$LINUX_NEXT"

cd $HOME || exit 2

function update_git_tree {
	SRC=""
	cd "$1" || exit 2
	if [[ "$1" != "$LINUX_NEXT" ]]; then
		SRC="$SOURCE"
	fi
	echo "git fetch $SRC ($PWD)"
	git fetch $SRC
	git repack -d
	git reset --hard origin/master
}

for i in $COMPAT_WIRELESS_TREE $GIT_COMPAT_TREE $LINUX_NEXT; do
	update_git_tree $i
	echo > /dev/null
done

for i in noflags p c; do
	cd $COMPAT_WIRELESS_TREE

	if [[ $i != "noflags" ]]; then
		FLAGS="$FLAGS -${i}"
		# this will just be "pc" when using both
		# pendign patches and crap patches
		FILE_POSTFIX="${FILE_POSTFIX}$i"
	else
		FLAGS=""
		FILE_POSTFIX=""
	fi
	# NOTE: Although we have admin-refresh which does the two below
	# we do these individually to catch errors.
	rm -rf *
	rm -f .compat_*
	git checkout -f
	./scripts/admin-update.sh $FLAGS 2>&1 > /dev/null
	RET=$?
	if [ $RET -ne 0 ]; then
		echo -en "Error while updating from wireless-testing"
		if [[ $i = "noflags" ]]; then
			echo -en "\n"
		else
			echo -en "with flags: $FLAGS\n"
		fi
		exit $RET
	fi

	
	if [[ $i != "noflags" ]]; then
		COMPAT_DATE_DIR="${ORIG_COMPAT_DATE_DIR}-${FILE_POSTFIX}"
	fi

	cd ..
	mkdir -p $STAGING
	rm -rf $STAGING/${COMPAT_DATE_DIR}
	cp -a $COMPAT_DIR $STAGING/${COMPAT_DATE_DIR}
	rm -rf $STAGING/${COMPAT_DATE_DIR}/.git/

	cd $STAGING

	tar -jcf ${COMPAT_DATE_DIR}.tar.bz2 ${COMPAT_DATE_DIR}/

	# Only test this once, and only for the most complex tarballs
	if [[ $i = "noflags" ]]; then

		cd ${COMPAT_DATE_DIR}/
		$HOME/compat/bin/ckmake
		if [[ $? -ne 0 ]]; then
			echo "Failed..."
			cd $STAGING
			rm -rf *
			exit 1
		fi
		echo "Worked!"

		rm -f $OUTPUT/${ORIG_COMPAT_DATE_DIR}*.tar.bz2
		cd $STAGING

		bzip2 ${COMPAT_DATE_DIR}/ckmake.log
		chmod 755 ${COMPAT_DATE_DIR}/ckmake-report.log ${COMPAT_DATE_DIR}/ckmake.log.bz2

		cp ${COMPAT_DATE_DIR}/ckmake.log.bz2 $OUTPUT/ckmake-${DATE}.log.bz2
		cp ${COMPAT_DATE_DIR}/ckmake-report.log $OUTPUT/ckmake-report-${DATE}.log

		cd $OUTPUT
		ln -s ckmake-${DATE}.log.bz2 ckmake.log.bz2
		ln -s ckmake-report-${DATE}.log ckmake-report.log
	fi

	cd $STAGING
	mv -f ${COMPAT_DATE_DIR}.tar.bz2 $OUTPUT
	cd $OUTPUT

	if [[ $i = "noflags" ]]; then
		ln -sf ${COMPAT_DATE_DIR}.tar.bz2 ${COMPAT_DIR}.tar.bz2
	fi

	# The archiving is handled by archive-compat-wireless
	# This run is just for the top level directory.
	sha1sum *.tar.bz2 > sha1sums.txt

	chmod 755 $OUTPUT/*
done

cd $OUTPUT
cat ckmake-report.log
rm -rf $STAGING
